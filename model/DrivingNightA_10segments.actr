;;
;;
(set-task "actr.tasks.driving.Driving_10segments")
(set-sleep-schedule 
    (8.0 22.0)(32.0 39.0)(44.0 58.0)(68.0 82.0)(92.0 106.0)(116.0 130.0)(140.0 154.0)
    (159.0 166.0)(176.0 183.0)(188.0 202.0)(212.0 226.0)(236.0 250.0)(260.0 274.0)(284.0 298.0)
)

(set-task-schedule 
    ;;
    45.0   48.0   51.0   54.0  ;;// day2
    69.0   72.0   75.0   78.0  ;;// day3
    93.0   96.0   99.0   102.0 ;;// day4
    117.0 120.0 123.0 126.0 ;;// day5
    141.0 144.0 147.0 150.0 ;;// day6
    
    189.0 192.0 195.0 198.0 ;;// day9
    213.0 216.0 219.0 222.0 ;;// day10
    237.0 240.0 243.0 246.0 ;;// day11
    261.0 264.0 267.0 270.0 ;;// day12
    285.0 288.0 291.0 294.0 ;;// day13
)

(set-output-dir "./resultDriving/NightA")

(set-task-duration 1800.0) ;; the driving sessions are 30 min (30 * 60sec)

(sgp 
    :cst nil
    :v nil
    :fatigue t 
    :fatigue-partial-matching nil
    :iu 1.56
    :ut 1.15
    ;; (IU-(fpbmc*BioMath)) - (UT-(utbmc*BioMath)) = X
    ;; BioMath(utbmc-fpbmc) + IU - UT0 = X
    ;; best value for  BioMath=4.26 (10am) : X=
    ;; IU = BM * ( fpbmc - utbmc ) + X + UT0
    
    ;;:microlapses nil
    :fpbmc .029
    :fpmc .12 ;;.13
    :fpmc0 0
    
    :utbmc .01
    :utmc  .04 ;;.02
    :utmc0 0
    
    :fp-dec 0.006
    
    :egs .25
    ;:cst t
    
    :dat .05
    :randomize-time t
    :vpft t
    
    :motor-feature-prep-time 0 ; .05
    :max-prep-time-diff 10.0  
    :visual-attention-latency .055 ; .035
)

(add-dm (goal isa drive))
(goal-focus goal)


(p drive*attend-near
    =goal>
        isa drive
        na nil
    ?visual-location>
        state free
        - buffer requested
    ?visual>
        state free
        buffer empty
==>
    !eval! (fatigue-reset-percentage)
    !eval! (fatigue-utility-dec-off)
    +visual-location>
        isa visual-location
        kind near
)
;(spp :u 4)

(p drive*process-near-attend-far
    =goal>
        isa drive
        na nil
    =visual-location>
        isa visual-location
        kind near
        screen-x =nx
        screen-y =ny
        distance =nd
    ?visual>
        state free
        buffer empty
==>
    !eval! (fatigue-reset-percentage)
    !eval! (fatigue-utility-dec-off)
    !bind! =na (image->angle =nx =nd)
    =goal>
        na =na
    +visual-location>
        isa visual-location
        kind car
)
;(spp :u 4)

(p drive*process-car
    =goal>
        isa drive
        na =na
        fa nil
        na2    =na2
        fa2    =fa2
        fkind2 =fkind
        fthw2  =fthw2
        time2  =time2
    =visual-location>
        isa visual-location
        kind car
        kind =fkind
        screen-x =fx
        distance =fd
    ?visual>
        state free
        buffer empty
==>
    !eval! (fatigue-reset-percentage)
    !eval! (fatigue-utility-dec-off)
    !bind! =fa (image->angle =fx =fd)
    !bind! =time (mp-time)
    !bind! =dna (- =na =na2)
    !bind! =dfa (- =fa =fa2)
    !bind! =dt (- =time =time2)
    !bind! =vna (my/ =dna =dt)
    !bind! =vfa (my/ =dfa =dt)
    !bind! =v (get-velocity)
    !bind! =fthw (get-thw =fd =v)
    !bind! =dthw (- =fthw =fthw2)
    !eval! (do-steer =na =dna =dfa =dt)
    !eval! (do-accelerate =fthw =dthw =dt)
    =goal>
        fkind =fkind
        fa =fa
        fd =fd
        vna =vna
        vfa =vfa
        time =time
        fthw =fthw
        v =v
        done t
    +visual>
        isa move-attention
        screen-pos =visual-location
)
;(spp :u 4)

(p drive*process-without-old
    =goal>
        isa drive
        na =na
        fa nil
        fa2 nil
    =visual-location>
        isa visual-location
        kind =fkind
        screen-x =fx
        distance =fd
    ?visual>
        state free
        buffer empty
==>
    !eval! (fatigue-reset-percentage)
    !eval! (fatigue-utility-dec-off)
    !bind! =fa (image->angle =fx =fd)
    !bind! =v (get-velocity)
    !bind! =fthw (get-thw =fd =v)
    !bind! =time (mp-time)
    =goal>
        na nil
        fa nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        fthw2 =fthw
        time2 =time
    +visual-location>
        isa visual-location
        kind near
)
;(spp :u 4)

(p drive*loop-stable
    =goal>
        isa drive
        na =na
        fa =fa
        vna =vna
        vfa =vfa
        fd =fd
        fkind =fkind
        fthw =fthw
        time =time
    =visual>
        isa car
    !eval! (is-car-stable =na =vna =vfa)
==>
    !eval! (fatigue-reset-percentage)
    !eval! (fatigue-utility-dec-off)
    =goal>
        isa wait
        index 1
        na =na ; nil
        fa =fa ;nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        fthw2 =fthw
        time2 =time
)
;(spp :u 4)

(p wait-continue
    =goal>
        isa wait
        index =index
        na =na ; nil
        fa =fa ;nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        fthw2 =fthw
        time2 =time
    !eval! (< =index 10)
==>
    !output! (=index)
    !bind! =index (+ =index 1)
    !eval! (fatigue-reset-percentage)
    !eval! (fatigue-utility-dec-on)
    =goal>
        isa wait
        index =index
        na =na ; nil
        fa =fa ;nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        fthw2 =fthw
        time2 =time     
)

(p wait-done
    =goal>
        isa wait
        index =index
        na =na ; nil
        fa =fa ;nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        fthw2 =fthw
        time2 =time
    !eval! (>= =index 10)
==>
    !eval! (fatigue-reset-percentage)
    !eval! (fatigue-utility-dec-on)
    =goal>
        isa drive
        na  nil
        fa  nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        fthw2 =fthw
        time2 =time
)

(p drive*loop-not-stable
    =goal>
        isa drive
        na =na
        fa =fa
        vna =vna
        vfa =vfa
        fd =fd
        fkind =fkind
        fthw =fthw
        time =time
    =visual>
        isa car
    !eval! (is-car-not-stable =na =vna =vfa)
==>
    !eval! (fatigue-reset-percentage)
    !eval! (fatigue-utility-dec-off)
    =goal>
        na nil
        fa nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        fthw2 =fthw
        time2 =time
    +visual-location>
        isa visual-location
        kind near
)
;(spp :u 4)
