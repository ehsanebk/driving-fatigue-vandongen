(set-task "actr.tasks.driving.DrivingDayA_10segments")
(set-schedule 
    (8.0 22.0)(32.0 46.0)(56.0 70.0)(80.0 94.0)(104.0 118.0)(128.0 142.0)(152.0 166.0)
    (176.0 190.0)(200.0 214.0)(224.0 238.0)(248.0 262.0)(272.0 286.0)(296.0 310.0)(320.0 334.0)
)

(set-task-schedule 
    ;;  //
    57.0    60.0    63.0    66.0    ;; // day2
    81.0    84.0    87.0    90.0    ;; // day3
    105.0  108.0  111.0  114.0  ;; // day4
    129.0  132.0  135.0  138.0  ;; // day5
    153.0  156.0  159.0  162.0  ;; // day6
    
    201.0  204.0  207.0  210.0  ;; // day9
    225.0  228.0  231.0  234.0  ;; // day10
    249.0  252.0  255.0  258.0  ;; // day11
    273.0  276.0  279.0  282.0  ;; // day12
    297.0  300.0  303.0  306.0  ;; // day13
)

(set-output-dir "./result-10seg/DayA")

(set-task-duration 1800.0) ;; the driving sessions are 30 min (30 * 60sec)

(sgp 
    :cst nil
    :v nil
    :fatigue t 
    :fatigue-partial-matching nil
    :iu 1.63
    :ut 1.22
    ;; (IU-(fpbmc*BioMath)) - (UT-(utbmc*BioMath)) = X
    ;; BioMath(utbmc-fpbmc) + IU - UT0 = X
    ;; best value for  BioMath=4.26 (10am) : X=
    ;; IU = BM * ( fpbmc - utbmc ) + X + UT0
    
    ;;:microlapses nil
    :fpbmc .028
    :fpmc .12 ;;.13
    :fpmc0 0
    
    :utbmc .01
    :utmc  .04 ;;.02
    :utmc0 0
    
    :fp-dec 0.006
    
    :egs .25
    ;:cst t
    
    :dat .05
    :randomize-time t
    :vpft t
    
    :motor-feature-prep-time 0 ; .05
    :max-prep-time-diff 10.0  
    :visual-attention-latency .055 ; .035
)

(add-dm (goal isa drive))
(goal-focus goal)


(p drive*attend-near
    =goal>
        isa drive
        na nil
    ?visual-location>
        state free
        - buffer requested
    ?visual>
        state free
        buffer empty
==>
    !eval! (fatigue-reset-percentage)
    !eval! (fatigue-utility-dec-off)
    +visual-location>
        isa visual-location
        kind near
)
;(spp :u 4)

(p drive*process-near-attend-far
    =goal>
        isa drive
        na nil
    =visual-location>
        isa visual-location
        kind near
        screen-x =nx
        screen-y =ny
        distance =nd
    ?visual>
        state free
        buffer empty
==>
    !eval! (fatigue-reset-percentage)
    !eval! (fatigue-utility-dec-off)
    !bind! =na (image->angle =nx =nd)
    =goal>
        na =na
    +visual-location>
        isa visual-location
        kind car
)
;(spp :u 4)

(p drive*process-car
    =goal>
        isa drive
        na =na
        fa nil
        na2    =na2
        fa2    =fa2
        fkind2 =fkind
        fthw2  =fthw2
        time2  =time2
    =visual-location>
        isa visual-location
        kind car
        kind =fkind
        screen-x =fx
        distance =fd
    ?visual>
        state free
        buffer empty
==>
    !eval! (fatigue-reset-percentage)
    !eval! (fatigue-utility-dec-off)
    !bind! =fa (image->angle =fx =fd)
    !bind! =time (mp-time)
    !bind! =dna (- =na =na2)
    !bind! =dfa (- =fa =fa2)
    !bind! =dt (- =time =time2)
    !bind! =vna (my/ =dna =dt)
    !bind! =vfa (my/ =dfa =dt)
    !bind! =v (get-velocity)
    !bind! =fthw (get-thw =fd =v)
    !bind! =dthw (- =fthw =fthw2)
    !eval! (do-steer =na =dna =dfa =dt)
    !eval! (do-accelerate =fthw =dthw =dt)
    =goal>
        fkind =fkind
        fa =fa
        fd =fd
        vna =vna
        vfa =vfa
        time =time
        fthw =fthw
        v =v
        done t
    +visual>
        isa move-attention
        screen-pos =visual-location
)
;(spp :u 4)

(p drive*process-without-old
    =goal>
        isa drive
        na =na
        fa nil
        fa2 nil
    =visual-location>
        isa visual-location
        kind =fkind
        screen-x =fx
        distance =fd
    ?visual>
        state free
        buffer empty
==>
    !eval! (fatigue-reset-percentage)
    !eval! (fatigue-utility-dec-off)
    !bind! =fa (image->angle =fx =fd)
    !bind! =v (get-velocity)
    !bind! =fthw (get-thw =fd =v)
    !bind! =time (mp-time)
    =goal>
        na nil
        fa nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        fthw2 =fthw
        time2 =time
    +visual-location>
        isa visual-location
        kind near
)
;(spp :u 4)

(p drive*loop-stable
    =goal>
        isa drive
        na =na
        fa =fa
        vna =vna
        vfa =vfa
        fd =fd
        fkind =fkind
        fthw =fthw
        time =time
    =visual>
        isa car
    !eval! (is-car-stable =na =vna =vfa)
==>
    !eval! (fatigue-reset-percentage)
    !eval! (fatigue-utility-dec-off)
    =goal>
        isa wait
        index 1
        na =na ; nil
        fa =fa ;nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        fthw2 =fthw
        time2 =time
)
;(spp :u 4)

(p wait-continue
    =goal>
        isa wait
        index =index
        na =na ; nil
        fa =fa ;nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        fthw2 =fthw
        time2 =time
    !ouput! (=index)
        ;;!eval! (< =index 7)
==>
    !bind! =index (+ =index 1)
    !eval! (fatigue-reset-percentage)
    !eval! (fatigue-utility-dec-on)
    =goal>
        isa wait
        index =index
        na =na ; nil
        fa =fa ;nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        fthw2 =fthw
        time2 =time
        
)

(p wait-done
    =goal>
        isa wait
        index =index
        na =na ; nil
        fa =fa ;nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        fthw2 =fthw
        time2 =time
        ;; !eval! (>= =index 7)
==>
    !eval! (fatigue-reset-percentage)
    !eval! (fatigue-utility-dec-on)
    =goal>
        isa drive
        na  nil
        fa  nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        fthw2 =fthw
        time2 =time
)

(p drive*loop-not-stable
    =goal>
        isa drive
        na =na
        fa =fa
        vna =vna
        vfa =vfa
        fd =fd
        fkind =fkind
        fthw =fthw
        time =time
    =visual>
        isa car
    !eval! (is-car-not-stable =na =vna =vfa)
==>
    !eval! (fatigue-reset-percentage)
    !eval! (fatigue-utility-dec-off)
    =goal>
        na nil
        fa nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        fthw2 =fthw
        time2 =time
    +visual-location>
        isa visual-location
        kind near
)
;(spp :u 4)
