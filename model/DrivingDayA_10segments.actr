(set-task "actr.tasks.driving.DrivingDayA_10segments")
(set-schedule 
    (8.0 22.0)(32.0 46.0)(56.0 70.0)(80.0 94.0)(104.0 118.0)(128.0 142.0)(152.0 166.0)
    (176.0 190.0)(200.0 214.0)(224.0 238.0)(248.0 262.0)(272.0 286.0)(296.0 310.0)(320.0 334.0)
)
(sgp
    :cst nil
    :v nil
    :fatigue t   
    :iu 2.8
    :ut 2.3
    
    ;;:microlapses nil
    :fpbmc .02
    :fpmc -.005
    
    :utbmc .01  
    :utmc -.0012
    
    :fp-dec 0.998   
    :egs .25
    ;:cst t
    
    :dat .05
    :randomize-time t
    :vpft t
    
    :max-prep-time-diff 10.0
)

(add-dm (goal isa drive))
(goal-focus goal)


(p drive*attend-near
    =goal>
        isa drive
        na nil
    ?visual-location>
        state free
        - buffer requested
    ?visual>
        state free
        buffer empty
==>
        ;!eval! (fatigue-reset-percentage)
    +visual-location>
        isa visual-location
        kind near
)
;(spp :u 4)

(p drive*process-near-attend-far
    =goal>
        isa drive
        na nil
    =visual-location>
        isa visual-location
        kind near
        screen-x =nx
        screen-y =ny
        distance =nd
    ?visual>
        state free
        buffer empty
==>
        ;!eval! (fatigue-reset-percentage)
    !bind! =na (image->angle =nx =nd)
    =goal>
        na =na
    +visual-location>
        isa visual-location
        kind car
)
;(spp :u 4)

(p drive*process-car
    =goal>
        isa drive
        na =na
        fa nil
        na2    =na2
        fa2    =fa2
        fkind2 =fkind
        fthw2  =fthw2
        time2  =time2
    =visual-location>
        isa visual-location
        kind car
        kind =fkind
        screen-x =fx
        distance =fd
    ?visual>
        state free
        buffer empty
==>
        ;!eval! (fatigue-reset-percentage)
    !bind! =fa (image->angle =fx =fd)
    !bind! =time (mp-time)
    !bind! =dna (- =na =na2)
    !bind! =dfa (- =fa =fa2)
    !bind! =dt (- =time =time2)
    !bind! =vna (my/ =dna =dt)
    !bind! =vfa (my/ =dfa =dt)
    !bind! =v (get-velocity)
    !bind! =fthw (get-thw =fd =v)
    !bind! =dthw (- =fthw =fthw2)
    !eval! (do-steer =na =dna =dfa =dt)
    !eval! (do-accelerate =fthw =dthw =dt)
    =goal>
        fkind =fkind
        fa =fa
        fd =fd
        vna =vna
        vfa =vfa
        time =time
        fthw =fthw
        v =v
        done t
    +visual>
        isa move-attention
        screen-pos =visual-location
)
;(spp :u 4)

(p drive*process-without-old
    =goal>
        isa drive
        na =na
        fa nil
        fa2 nil
    =visual-location>
        isa visual-location
        kind =fkind
        screen-x =fx
        distance =fd
    ?visual>
        state free
        buffer empty
==>
        ;!eval! (fatigue-reset-percentage)
    !bind! =fa (image->angle =fx =fd)
    !bind! =v (get-velocity)
    !bind! =fthw (get-thw =fd =v)
    !bind! =time (mp-time)
    =goal>
        na nil
        fa nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        fthw2 =fthw
        time2 =time
    +visual-location>
        isa visual-location
        kind near
)
;(spp :u 4)

(p drive*loop-stable
    =goal>
        isa drive
        na =na
        fa =fa
        vna =vna
        vfa =vfa
        fd =fd
        fkind =fkind
        fthw =fthw
        time =time
    =visual>
        isa car
    !eval! (is-car-stable =na =vna =vfa)
==>
        ;!eval! (fatigue-reset-percentage)
    =goal>
        isa wait
        na =na ; nil
        fa =fa ;nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        fthw2 =fthw
        time2 =time
)
;(spp :u 4)

(p wait 
    =goal>
        isa wait
        na =na
        fa =fa
        vna =vna
        vfa =vfa
        fd =fd
        fkind =fkind
        fthw =fthw
        time =time
    !eval! (is-car-stable =na =vna =vfa)
==>
        ;!eval! (fatigue-reset-percentage)
    =goal>
        isa drive
        na  nil
        fa  nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        fthw2 =fthw
        time2 =time
)
;(spp :u 1)




(p drive*loop-not-stable
    =goal>
        isa drive
        na =na
        fa =fa
        vna =vna
        vfa =vfa
        fd =fd
        fkind =fkind
        fthw =fthw
        time =time
    =visual>
        isa car
    !eval! (is-car-not-stable =na =vna =vfa)
==>
    !eval! (fatigue-reset-percentage)
    =goal>
        na nil
        fa nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        fthw2 =fthw
        time2 =time
    +visual-location>
        isa visual-location
        kind near
)
;(spp :u 4)
